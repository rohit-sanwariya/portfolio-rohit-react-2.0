{"version":3,"sources":["App.js","serviceWorkerRegistration.js","index.js"],"names":["Home","lazy","Projects","Skills","About","Navbar","App","fallback","className","role","href","exact","path","exactpath","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"kSAMMA,EAAOC,gBAAK,kBAAM,gCAClBC,EAAWD,gBAAK,kBAAM,gCACtBE,EAASF,gBAAK,kBAAM,iCACpBG,EAAQH,gBAAK,kBAAM,sDACnBI,EAASJ,gBAAK,kBAAM,gCA4CXK,MAzCf,WAQO,OAAO,cAAC,WAAD,CAAUC,SAJU,qBAAKC,UAAU,eAAeC,KAAK,SAAnC,SAC3B,sBAAMD,UAAU,UAAhB,0BAGO,SACA,cAAC,IAAD,UACO,sBAAKA,UAAU,YAAf,UAEO,qBAAKA,UAAU,OAAf,SACO,mBAAGE,KAAK,IAAIF,UAAU,YAAtB,sBAEP,cAACH,EAAD,IAEA,eAAC,IAAD,WACO,cAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,IAAlB,SACO,cAACZ,EAAD,MAEP,cAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,YAAlB,SACO,cAACV,EAAD,MAEP,cAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,UAAlB,SACO,cAACT,EAAD,MAEP,cAAC,IAAD,CAAOU,UAAU,SAAjB,SACO,cAACT,EAAD,iBCvCpCU,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MC9EjEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDAnB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,6BAAwB9B,OAAOC,SAASP,MACpDqC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMyB,6BAAN,sBAEPhC,IAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAACyB,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAACC,GAClCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFVwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OCrB/BsC,K","file":"static/js/main.65a973b9.chunk.js","sourcesContent":["import { BrowserRouter, Route, Switch } from 'react-router-dom'\r\nimport { lazy, Suspense } from 'react';\r\n\r\nimport './App.css'\r\nimport './App.scss'\r\n\r\nconst Home = lazy(() => import('./Components/Home'))\r\nconst Projects = lazy(() => import('./Components/Projects'))\r\nconst Skills = lazy(() => import('./Components/Skills'))\r\nconst About = lazy(() => import('./Components/About'))\r\nconst Navbar = lazy(() => import('./Components/Navbar'))\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n\r\n       const renderLoader = () => <div className=\"spinner-grow\" role=\"status\">\r\n       <span className=\"sr-only\">Loading...</span>\r\n     </div>\r\n\r\n       return <Suspense fallback={renderLoader()}>\r\n              <BrowserRouter>\r\n                     <div className=\"container\">\r\n\r\n                            <div className=\"logo\">\r\n                                   <a href=\"/\" className=\"logo-text\"> Rohit</a>\r\n                            </div>\r\n                            <Navbar />\r\n\r\n                            <Switch>\r\n                                   <Route exact path=\"/\" >\r\n                                          <Home />\r\n                                   </Route>\r\n                                   <Route exact path=\"/projects\" >\r\n                                          <Projects />\r\n                                   </Route>\r\n                                   <Route exact path=\"/skills\" >\r\n                                          <Skills />\r\n                                   </Route>\r\n                                   <Route exactpath=\"/about\" >\r\n                                          <About />\r\n                                   </Route>\r\n                            </Switch>\r\n                           \r\n\r\n                     </div>\r\n\r\n              </BrowserRouter>\r\n       </Suspense>\r\n\r\n\r\n}\r\n\r\nexport default App;\r\n","\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}